{"version":3,"sources":["components/Calc-button.jsx","components/Calc-input.jsx","components/Calc-clear.jsx","App.js","serviceWorker.js","index.js"],"names":["CalcButton","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","CalcInput","input","CalcClear","handleClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","add","setState","state","handleResult","math","_this2","Calc_input_CalcInput","Calc_button_CalcButton","Calc_clear_CalcClear","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9599dd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Calc-button.css';\r\n\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\"};\r\n\r\nexport const CalcButton = props => <div className={`button-box ${\r\n    isOperator(props.children) ? null : \"operator\"\r\n}`}\r\n                                        onClick={() => props.handleClick(props.children)}\r\n>{props.children} </div>;\r\n","import React from 'react';\r\nimport './Calc-input.css';\r\n\r\nexport const CalcInput = (props) => <div className=\"input\">{props.input}</div>;","import React from 'react';\r\nimport './Calc-clear.css';\r\n\r\nexport const CalcClear = (props) => (\r\n    <div className=\"clr\" onClick={props.handleClear}>{props.children}</div>\r\n);","import React, { Component} from 'react';\nimport './App.css';\nimport { CalcButton } from './components/Calc-button';\nimport { CalcInput } from './components/Calc-input';\nimport { CalcClear } from './components/Calc-clear';\nimport * as math from 'mathjs';\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            input: \"\",\n        };\n    }\n\n    add = val => {\n        this.setState({input: this.state.input + val})\n    };\n\n    handleResult = () => {\n        this.setState({ input: math.evaluate(this.state.input) });\n    };\n\n    render() {\n        return (\n            <div className=\"application\">\n                <div className=\"calculator\">\n                    <div className=\"about\">Calculator by Mosejko Dmitrij</div>\n                    <CalcInput input={this.state.input} />\n                    <div className=\"box\">\n                    <div className=\"calc-row\">\n                        <CalcButton handleClick={this.add}>1</CalcButton>\n                        <CalcButton handleClick={this.add}>2</CalcButton>\n                        <CalcButton handleClick={this.add}>3</CalcButton>\n                        <CalcButton handleClick={this.add}>/</CalcButton>\n                    </div>\n                    <div className=\"calc-row\">\n                        <CalcButton handleClick={this.add}>4</CalcButton>\n                        <CalcButton handleClick={this.add}>5</CalcButton>\n                        <CalcButton handleClick={this.add}>6</CalcButton>\n                        <CalcButton handleClick={this.add}>*</CalcButton>\n                    </div>\n                    <div className=\"calc-row\">\n                        <CalcButton handleClick={this.add}>7</CalcButton>\n                        <CalcButton handleClick={this.add}>8</CalcButton>\n                        <CalcButton handleClick={this.add}>9</CalcButton>\n                        <CalcButton handleClick={this.add}>+</CalcButton>\n                    </div>\n                    <div className=\"calc-row\">\n                        <CalcButton handleClick={this.add}>.</CalcButton>\n                        <CalcButton handleClick={this.add}>0</CalcButton>\n                        <CalcButton handleClick={() => this.handleResult()}>=</CalcButton>\n                        <CalcButton handleClick={this.add}>-</CalcButton>\n                    </div>\n                    <div className=\"calc-row\">\n                        <CalcClear handleClear={() => this.setState({ input: \"\" })}>Clear</CalcClear>\n                    </div>\n                    </div>\n                </div>\n            </div>\n    );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}